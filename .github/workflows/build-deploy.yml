name: Build & Deploy

on:
  pull_request:
    types: [opened, closed, synchronize]
    branches: [master]

jobs:
  e2etests:
    if: github.event.pull_request.merged != true
    name: ${{ matrix.browser}} end-to-end tests
    strategy:
      matrix:
        os: [ubuntu-latest]
        dotnet: [3.1.301]
        node: [12]
        #browser: [Chrome, Webkit, Firefox]
        browser: [Chrome]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

      # - uses: microsoft/playwright-github-action@v1
      #   name: Install Playwright Firefox & Webkit dependencies

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Install dotnet tools
        run: dotnet tool restore

      - name: Install C# dependencies
        run: dotnet restore

      - name: build
        # TODO: Remove CI=false
        run: CI=false dotnet tye build -v Debug

      - name: start container
        run: docker run -d -p 5000:80 staff0rd/digitalicebreakers:$(dotnet nbgv get-version -v AssemblyInformationalVersion | tr + -)

      - name: run end-to-end tests
        env:
          Browser: ${{ matrix.browser }}
        run: dotnet test
        working-directory: DigitalIcebreakers.EndToEndTests
  build:
    name: Build ${{ matrix.os }} and Test
    if: github.event.pull_request.merged != true
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        dotnet: [3.1.301]
        node: [12]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Install node dependencies
        run: npm i
        working-directory: ./DigitalIcebreakers/ClientApp

      - name: Lint
        run: npm run lint
        working-directory: ./DigitalIcebreakers/ClientApp

      - name: Install dotnet tools
        run: dotnet tool restore

      - name: Install C# dependencies
        run: dotnet restore

      - name: Run C# build
        run: dotnet build --configuration Release --no-restore

      - name: Run C# tests
        run: dotnet test --no-restore --verbosity normal
        working-directory: ./DigitalIcebreakers.Test

      - name: Front-end tests
        run: npm run test-ci
        working-directory: ./DigitalIcebreakers/ClientApp
  deploy:
    name: Deploy
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.301

      - name: Install dotnet tools
        run: dotnet tool restore

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Install node dependencies
        run: npm i
        working-directory: ./DigitalIcebreakers/ClientApp

      - run: npm run set-version
        working-directory: ./DigitalIcebreakers/ClientApp
        name: update client app version

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install C# dependencies
        run: dotnet restore

      - name: push container
        run: dotnet tye push -v Debug

      - name: get version
        run: |
          echo "semantic_version=$(dotnet nbgv get-version -v AssemblyInformationalVersion | tr + -)" >> $GITHUB_ENV
      - run: echo "semantic version is ${{ env.semantic_version }}"
      - uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/dispatches
          owner: staff0rd
          repo: deploy
          event_type: digital-icebreakers
          client_payload: |
            semantic_version: ${{ env.semantic_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_REPO_TOKEN }}
